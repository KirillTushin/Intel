/*
 * assem1.3.c
 * 
 * Tushin Kirill
 * 
 * 
 */

#include <stdio.h>
#include <string.h>

#define STR 10

char push[4] = {'p','u','s','h'};
char pop[3] = {'p','o','p'};
char add[3] = {'a','d','d'};
char div[3] = {'d','i','v'};
char mul[3] = {'m','u','l'};
char sub[3] = {'s','u','b'};


char equal(char* arr);
void clear(char * arr, int size);

int main(int argc, char **argv)
{
	FILE *fin, *fout;
	int a = 0;
	char c;
	int i = 0, tmp;
	
	char arr[STR] = {'0','0','0','0','0','0','0','0','0','0'};
	
	
	if (!(fin = fopen("test.asem", "r"))) 
	{ 
		printf ("can't open a file for read\n"); 
		return -1; 
	}
	
	//==================================================================
	while(1)
	{
		c = fgetc(fin);
		if(c == EOF)
			break;
		if(c == '\n')
			a++;
		if(c == ' ')
			a++;
	}
	fclose(fin);
	
	
	//==================================================================
	if ((fin = fopen("test.asem", "r")) == NULL) 
	{ 
		printf ("can't open a file for read\n"); 
		return -1; 
	}
	
	if ((fout = fopen("my.forcpu", "w")) == NULL) 
	{ 
		printf ("can't open a file for writing\n"); 
		return -1; 
	}
	
	//==================================================================
	
		
	while(a)
	{
		c = fgetc(fin);
		while(c != ' ' && c != '\n' && c != EOF)
		{
			arr[i] = c;
			i++;
			c = fgetc(fin);
		}
		if(equal(arr) == '1')
		{
			fprintf(fout, "%c",equal(arr));
			fscanf(fin, "%d", &tmp);
			fprintf(fout, "%d", tmp);
		}
		else if(equal(arr) != '0')
			fprintf(fout, "%c",equal(arr));
		clear(arr, STR);
		i = 0;
		a--;
	}
	return 0;
}

void clear(char * arr, int size)
{
	int i = 0;
	for(i = 0; i < size; i++)
	{
		arr[i] = 0;
	}
}
char equal(char* arr)
{
	if(!strncmp(arr,push, 4))
		return '1';
	if(!strncmp(arr,pop,3))
		return '2';
	if(!strncmp(arr,add,3))
		return '3';
	if(!strncmp(arr,sub,3))
		return '4';
	if(!strncmp(arr,mul,3))
		return '5';
	if(!strncmp(arr,div,3))
		return '6';
	return '0';
}
